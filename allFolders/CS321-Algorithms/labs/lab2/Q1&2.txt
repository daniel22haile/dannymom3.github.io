#1. In the SelectionSortdiscussed in class,

     a. the largest keys accumulate on the left (low indices). 
     b. a minimum key is repeatedly discovered. 
     c. a number of items must be shifted to insert each item in its correctly sorted position.
     d. the sorted items accumulate on the right

     answer: b

#2. In the InsertionSort, after an item is inserted in the partially sorted group, it will 
    a. never be moved again.
    b. never be shifted to the left.
    c. often be moved out of this group.
    d. find that its group is steadily shrinking.

    answer: b


#4   a. Design an algorithm Merge to solve this problem and write your algorithm 
      description using the pseudo-code syntax.
    
     answer:

     Algorithm mergeSort(arr1, arr2)
          results <--- []
          counter <--- 0
          i <--- 0
          j <--- 0

          while i < arr1.length && j < arr2.length
              if arr2[j] > arr1[i] then
                 results[counter++] <--- arr1[i]
                 i <--- i + 1
              else
                 results[counter++] <--- arr2[j]
                 j <--- j + 1
          while i < arr1.length
               results[counter++] <--- arr1[i]
               i <--- i + 1
          while j < arr2.length
               results[counter++] <--- arr2[j]
               j <--- j + 1
          return results


     b. Examining your pseudo-code, determine the asymptotic running time of this 
        merge algorithm.

        answer:
            => The asymptotic running time for merge sort algorithm is O(nlogn)
            => It is more efficient as it is in worst case also the runtime is O(nlogn)