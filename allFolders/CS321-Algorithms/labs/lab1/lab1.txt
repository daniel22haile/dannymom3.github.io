1. Order the following functions in increasing order of growth rate.
      nlogn    2logn       4n3/2
      5n       2^n          4^n      
      n^3      n^2 logn     √n

     2logn -> √n -> 5n -> nlogn -> 4n3/2 -> n^2 logn   -> n^3 ->  2^n -> 4^n 

   answer: 

   a. 2logn
   b. n^1/2 <=> √n
   c. 5n
   d. nlogn
   e. 4n3/2     --> 4n^1.5, which is slower than n^2
   f. n^2logn
   g. n^3
   h. 2^n
   i. 4^n

------------------------------------------------------------------------------------------------
2. Give a big-O characterization, in terms of n, of the running time of the Loop1 method below:
    Algorithm Loop1(n) s←0
      fori← 1 to n do
       s←s+i

    answer:
     Algorithm Loop1(n) s←0
      fori← 1 to n do --> O(n)
       s←s+i --> takes constant time O(1)

    since it's a single loop
       => T(n) = O(n) * O(1)
               = O(n)
------------------------------------------------------------------------------------------------
3. Give a big-O characterization, in terms of n, of the running time of the Loop5 method below:

    Algorithm Loop5(n) 
       s ← 0 //initialize the sum
     fori← 1 to n do
      forj← 1 to i do 
        s←s+i //->this is a constant ==> O(1)

      answer: 
            - The first loop is O(n)
            - The inner is depend on the i
            So, it's going to be O(n) * O(n)
            => O(n^2)

------------------------------------------------------------------------------------------------
4. Decide whether each of the following is true or false, and in each case, explain your answer.
=> Definition for Big-Oh 
   if f(n) is big-oh of g(n), iff f(n) <= g(n) or f(n) is slower or equal to g(n)
   
    a. log n is O(n) 
      answer: true
                 => Because f(n) <= g(n). Therefore, logn < n
    b. 2^n is O(n^2)
    answer: false
                 => because f(n) > g(n), f(n) is exponential and bigger than 
                   quadratic (n^2)